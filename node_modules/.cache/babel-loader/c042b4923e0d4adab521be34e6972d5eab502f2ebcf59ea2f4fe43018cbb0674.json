{"ast":null,"code":"import { AccountActionType } from \"../../types/typeAccount\";\nconst initialState = {\n  dataList: {\n    phone: \"\",\n    surname: \"\",\n    firstName: \"\",\n    middleName: \"\",\n    username: \"\",\n    password: \"\",\n    deliveryMethod: \"SelfDelivery\" || \"NovaPoshta\" || \"UkrPoshta\",\n    addressNovaPoshta: {\n      postOffice: \"\",\n      city: \"\",\n      street: \"\",\n      number: \"\"\n    },\n    addressUkrPoshta: {\n      region: \"\",\n      district: \"\",\n      city: \"\",\n      street: \"\",\n      number: \"\",\n      zipcode: \"\"\n    }\n  },\n  historyOrder: [{\n    id: \"\",\n    date: new Date(),\n    productList: [{\n      id: \"\",\n      price: 0,\n      stateQuantity: 0,\n      name: \"\",\n      quantity: 0\n    }],\n    totalCost: 0,\n    status: \"being processed\" || \"finished\" || \"accepted\",\n    idOrder: \"\"\n  }],\n  login: {\n    phone: \"\",\n    password: \"\",\n    login: false,\n    registration: false\n  }\n};\nexport const accountReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case AccountActionType.ADD_DATA_LIST:\n      if (action.payload.addressNovaPoshta) {\n        return {\n          ...state,\n          dataList: {\n            ...state.dataList,\n            addressNovaPoshta: action.payload.addressNovaPoshta,\n            deliveryMethod: action.payload.deliveryMethod\n          }\n        };\n      } else if (action.payload.addressUkrPoshta) {\n        return {\n          ...state,\n          dataList: {\n            ...state.dataList,\n            addressUkrPoshta: action.payload.addressUkrPoshta,\n            deliveryMethod: action.payload.deliveryMethod\n          }\n        };\n      } else return {\n        ...state,\n        dataList: {\n          ...state.dataList,\n          phone: action.payload.phone,\n          surname: action.payload.surname,\n          firstName: action.payload.firstName,\n          middleName: action.payload.middleName,\n          username: action.payload.username,\n          password: action.payload.password,\n          deliveryMethod: action.payload.deliveryMethod\n        }\n      };\n    case AccountActionType.ADD_HISTORY_ORDER:\n      if (state.historyOrder[0].id === \"\") {\n        return {\n          ...state,\n          historyOrder: [{\n            ...action.payload,\n            status: \"finished\",\n            idOrder: Math.random().toString(16).slice(2)\n          }]\n        };\n      } else return {\n        ...state,\n        historyOrder: [...state.historyOrder, {\n          ...action.payload,\n          status: \"accepted\",\n          idOrder: Math.random().toString(16).slice(2)\n        }]\n      };\n    case AccountActionType.CORRECT_HISTORY_ORDER:\n      return {\n        ...state,\n        historyOrder: state.historyOrder.map(order => order.idOrder !== action.payload.idOrder ? order : action.payload)\n      };\n    case AccountActionType.REMOVE_ORDER:\n      return {\n        ...state,\n        historyOrder: state.historyOrder.filter(oder => oder.idOrder !== action.payload.idOrder)\n      };\n    case AccountActionType.ENTER_LOGIN:\n      return {\n        ...state,\n        login: action.payload\n      };\n    case AccountActionType.SIGN_OUT:\n      return {\n        ...state,\n        historyOrder: [{\n          id: \"\",\n          date: new Date(),\n          productList: [{\n            id: \"\",\n            price: 0,\n            stateQuantity: 0,\n            name: \"\",\n            quantity: 0\n          }],\n          totalCost: 0,\n          status: \"being processed\" || \"finished\" || \"accepted\",\n          idOrder: \"\"\n        }],\n        login: {\n          login: false,\n          registration: false,\n          password: \"\",\n          phone: \"\"\n        },\n        dataList: {\n          phone: \"\",\n          surname: \"\",\n          firstName: \"\",\n          middleName: \"\",\n          username: \"\",\n          password: \"\",\n          deliveryMethod: \"SelfDelivery\" || \"NovaPoshta\" || \"UkrPoshta\",\n          addressNovaPoshta: {\n            postOffice: \"\",\n            city: \"\",\n            street: \"\",\n            number: \"\"\n          },\n          addressUkrPoshta: {\n            region: \"\",\n            district: \"\",\n            city: \"\",\n            street: \"\",\n            number: \"\",\n            zipcode: \"\"\n          }\n        }\n      };\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["AccountActionType","initialState","dataList","phone","surname","firstName","middleName","username","password","deliveryMethod","addressNovaPoshta","postOffice","city","street","number","addressUkrPoshta","region","district","zipcode","historyOrder","id","date","Date","productList","price","stateQuantity","name","quantity","totalCost","status","idOrder","login","registration","accountReducer","state","action","type","ADD_DATA_LIST","payload","ADD_HISTORY_ORDER","Math","random","toString","slice","CORRECT_HISTORY_ORDER","map","order","REMOVE_ORDER","filter","oder","ENTER_LOGIN","SIGN_OUT"],"sources":["/home/ivan/Documents/Bee-RRBT/src/store/reducers/accountReducer.ts"],"sourcesContent":["import {AccountAction, AccountActionType, AccountState,} from \"../../types/typeAccount\";\nimport HistoryOrders from \"../../components/Account/OrderHistory\";\n\n\nconst initialState: AccountState = {\n    dataList: {\n        phone: \"\",\n        surname: \"\",\n        firstName: \"\",\n        middleName: \"\",\n        username: \"\",\n        password: \"\",\n        deliveryMethod: \"SelfDelivery\" || \"NovaPoshta\" || \"UkrPoshta\",\n        addressNovaPoshta: {\n            postOffice: \"\",\n            city: \"\",\n            street: \"\",\n            number: \"\"\n        },\n        addressUkrPoshta: {\n            region: \"\",\n            district: \"\",\n            city: \"\",\n            street: \"\",\n            number: \"\",\n            zipcode: \"\",\n        },\n    },\n\n\n    historyOrder: [{\n        id: \"\",\n        date: new Date(),\n        productList: [{\n            id: \"\",\n            price: 0,\n            stateQuantity: 0,\n            name: \"\",\n            quantity: 0\n        }],\n        totalCost: 0,\n        status:\"being processed\" || \"finished\" || \"accepted\",\n        idOrder: \"\"\n    }],\n\n    login: {\n        phone: \"\",\n        password: \"\",\n        login: false,\n        registration: false\n    },\n}\n\nexport const accountReducer = (state = initialState,  action: AccountAction): AccountState => {\n    switch (action.type){\n        case AccountActionType.ADD_DATA_LIST:\n            if(action.payload.addressNovaPoshta){\n                return {...state, dataList:{...state.dataList, addressNovaPoshta: action.payload.addressNovaPoshta, deliveryMethod: action.payload.deliveryMethod}}\n            } else\n            if(action.payload.addressUkrPoshta){\n                return {...state, dataList:{...state.dataList, addressUkrPoshta: action.payload.addressUkrPoshta, deliveryMethod: action.payload.deliveryMethod}}\n            } else\n            return {...state, dataList:{...state.dataList,\n                    phone: action.payload.phone,\n                    surname: action.payload.surname,\n                    firstName: action.payload.firstName,\n                    middleName: action.payload.middleName,\n                    username: action.payload.username,\n                    password: action.payload.password,\n                    deliveryMethod: action.payload.deliveryMethod\n            }}\n\n        case AccountActionType.ADD_HISTORY_ORDER:\n\n            if(state.historyOrder[0].id === \"\"){\n                return {...state, historyOrder: [{...action.payload, status: \"finished\", idOrder: Math.random().toString(16).slice(2)}]}\n            }else return {...state, historyOrder: [...state.historyOrder, {...action.payload, status: \"accepted\", idOrder: Math.random().toString(16).slice(2)}]}\n\n        case AccountActionType.CORRECT_HISTORY_ORDER:\n            return {...state,   historyOrder: state.historyOrder.map(order =>\n                        order.idOrder !== action.payload.idOrder\n                            ?   order\n                            :   action.payload\n                )}\n\n        case AccountActionType.REMOVE_ORDER:\n            return {...state, historyOrder: state.historyOrder.filter(oder => oder.idOrder !== action.payload.idOrder)}\n\n        case AccountActionType.ENTER_LOGIN:\n            return {...state, login: action.payload}\n\n        case AccountActionType.SIGN_OUT:\n            return {...state,\n                                historyOrder: [{\n                                    id: \"\",\n                                    date: new Date(),\n                                    productList: [{\n                                        id: \"\",\n                                        price: 0,\n                                        stateQuantity: 0,\n                                        name: \"\",\n                                        quantity: 0\n                                    }],\n                                    totalCost: 0,\n                                    status:\"being processed\" || \"finished\" || \"accepted\",\n                                    idOrder: \"\"\n                                }],\n\n                                login: {login:false, registration:false, password: \"\", phone: \"\"},\n                                dataList: {\n                                    phone: \"\",\n                                    surname: \"\",\n                                    firstName: \"\",\n                                    middleName: \"\",\n                                    username: \"\",\n                                    password: \"\",\n                                    deliveryMethod: \"SelfDelivery\" || \"NovaPoshta\" || \"UkrPoshta\",\n                                    addressNovaPoshta: {\n                                        postOffice: \"\",\n                                        city: \"\",\n                                        street: \"\",\n                                        number: \"\"\n                                    },\n                                    addressUkrPoshta: {\n                                        region: \"\",\n                                        district: \"\",\n                                        city: \"\",\n                                        street: \"\",\n                                        number: \"\",\n                                        zipcode: \"\",\n                                    }\n                                }\n                            }\n\n        default:\n            return state;\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}